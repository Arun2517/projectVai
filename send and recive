#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <ESP_Mail_Client.h>

#define WIFI_SSID "Aradhana Broadband #5078"
#define WIFI_PASSWORD "Yard@2023"

#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465

#define AUTHOR_EMAIL "esp32.2024pro@gmail.com"
#define AUTHOR_PASSWORD "phml zrsv rtto fpgz"
#define RECIPIENT_EMAIL "arunganesh2011@gmail.com"

#define IMAP_HOST "imap.gmail.com"
#define IMAP_PORT 993

SMTPSession smtp;
Session_Config config;
IMAPSession imap;
IMAP_Data imap_data;

// LCD setup (I2C address 0x27 for a 16x2 display)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Pin definitions
const int mq2Pin = 34;      // Analog pin connected to MQ2 sensor
const int buzzerPin = 18;    // Pin connected to the buzzer
const int servoPin = 23;     // Pin connected to the servo motor

// Threshold for gas concentration
const float gasThreshold = 1500.0;

// Servo object
Servo myServo;

void setup()
{
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Initialize Wi-Fi connection
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nConnected to Wi-Fi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Set up the MQ-2, buzzer, and servo pins
  pinMode(mq2Pin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  myServo.attach(servoPin);
  myServo.write(0);  // Start with the servo at 0 degrees

  // Welcome message on LCD
  lcd.setCursor(0, 0);
  lcd.print("Gas Sensor Init");
  delay(2000);
  lcd.clear();

  // SMTP configuration
  config.server.host_name = SMTP_HOST;
  config.server.port = SMTP_PORT;
  config.login.email = AUTHOR_EMAIL;
  config.login.password = AUTHOR_PASSWORD;

  // IMAP configuration
  config.server.host_name = IMAP_HOST;
  config.server.port = IMAP_PORT;
  config.login.email = AUTHOR_EMAIL;
  config.login.password = AUTHOR_PASSWORD;

  // Enable IMAP debug
  imap.debug(1);

  // Set callback function for IMAP
  imap.callback(imapCallback);

  // Clear all these fetch options to perform search
  imap_data.fetch.uid.clear();
  imap_data.fetch.number.clear();
  imap_data.fetch.sequence_set.string.clear();

  // Store html/text message body in IMAPSession object
  imap_data.enable.html = true;
  imap_data.enable.text = true;

  imap_data.limit.search = 1;  // Limit search result to 1 message

  // Set search criteria to fetch unseen messages
  imap_data.search.unseen_msg = true;
}

void loop()
{
  // Read analog value from MQ-2 sensor (0-1023)
  int sensorValue = analogRead(mq2Pin);

  // Convert the analog value to a gas concentration (approximate)
  float gasConcentration = (sensorValue / 1023.0) * 1000; // Scale to 0-1000

  // Print gas concentration on the serial monitor
  Serial.print("Gas Concentration: ");
  Serial.println(gasConcentration);

  // Display gas concentration on the LCD
  lcd.setCursor(0, 0);
  lcd.print("Gas Conc:");
  lcd.print(gasConcentration);
  lcd.print(" PPM");

  // Check if the gas concentration exceeds the threshold
  if (gasConcentration > gasThreshold) {
    // Activate the buzzer with "beep-beep" sound
    for (int i = 0; i < 3; i++) {
      digitalWrite(buzzerPin, HIGH);  // Turn buzzer on
      delay(200);                     // Wait 200ms
      digitalWrite(buzzerPin, LOW);   // Turn buzzer off
      delay(200);                     // Wait 200ms
    }

    // Rotate the servo to 90 degrees
    myServo.write(90);

    // Display warning on the LCD
    lcd.setCursor(0, 1);
    lcd.print("!! Gas Detected !!");

    // Send email notification
    sendNotification();
  } else {
    checkEmail();
    // Deactivate the buzzer
    digitalWrite(buzzerPin, LOW);

    // Rotate the servo back to 0 degrees
    myServo.write(0);

    // Clear the second line of the LCD
    lcd.setCursor(0, 1);
    lcd.print("                ");
  }

  // Check for new emails
  

  // Small delay for sensor stability
  delay(1000);
}

void sendNotification()
{
  // Create the email message
  SMTP_Message message;
  message.sender.name = "ESP32";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "Alert Message From Home";
  message.addRecipient("G Arun", RECIPIENT_EMAIL);
  message.text.content = "Gas Leakage Detected!!!";

  // Attempt to connect to the SMTP server and send the email
  if (!smtp.connect(&config)) {
    Serial.println("Failed to connect to SMTP server.");
    return;
  }

  Serial.println("Sending email...");
  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.println("Failed to send email.");
  } else {
    Serial.println("Email sent successfully!");
  }

  smtp.closeSession();  // Close the SMTP session
}

void checkEmail()
{
  // Attempt to connect to the IMAP server
  if (!imap.connect(&config, &imap_data)) {
    Serial.println("Failed to connect to IMAP server.");
    return;
  }

  // Select the inbox folder
  if (!imap.selectFolder("INBOX")) {
    Serial.println("Failed to select INBOX.");
    return;
  }

  // Search for unseen messages
  imap_data.search.criteria = "UNSEEN";
  if (MailClient.readMail(&imap, false)) {
    if (imap.data().msgItems.size() > 0) {
      IMAP_MSG_Item msg = imap.data().msgItems[0];  // Get the first message
      String content = msg.text.content;

      Serial.println("New Email Received:");
      Serial.println(content);

      // Check if the email contains the word "STOP"
      if (content.indexOf("STOP") >= 0) {
        Serial.println("STOP command received! Rotating servo to 90 degrees.");
        myServo.write(90);
      }
    }
  }

  imap.closeSession();  // Close the IMAP session
}

void imapCallback(IMAP_Status status)
{
  Serial.println(status.info());
}
